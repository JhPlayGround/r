beijing
seoul = left_join(seoul_dust,seoul_climate, by = "date")
seoul
seoul$date=gsub("-", "", seoul$date)
seoul$date = as.numeric(seoul$date)
data = left_join(seoul, beijing, by = "date")
head(data,10)
summary(data)
#결측치 제거
library(DataExplorer)
plot_missing(data)
data$ch_rain = ifelse(is.na(data$ch_rain), 0, data$ch_rain)
data$k_rain = ifelse(is.na(data$k_rain), 0, data$k_rain)
data$ch_sight <- ifelse(is.na(data$ch_sight), round(mean(data$ch_sight,na.rm = T),2), data$ch_sight)
table(data$k_wind_direct)
data$k_wind_direct <- ifelse(is.na(data$k_wind_direct), 270, data$k_wind_direct)
data$k_wind <- ifelse(is.na(data$k_wind), round(mean(data$k_wind,na.rm = T),1), data$k_wind)
data$ch_wind <- ifelse(is.na(data$ch_wind), round(mean(data$ch_wind,na.rm = T),1), data$ch_wind)
data$ch_avgtemp <- ifelse(is.na(data$ch_avgtemp), round(mean(data$ch_avgtemp,na.rm = T),1), data$ch_avgtemp)
data$ch_humidity <- ifelse(is.na(data$ch_humidity), round(mean(data$ch_humidity,na.rm = T)), data$ch_humidity)
data$ch_pm2.5 <- ifelse(is.na(data$ch_pm2.5), round(mean(data$ch_pm2.5,na.rm = T),5), data$ch_pm2.5)
plot_missing(data)
summary(data)
#이상치 제거
data$k_pm10 = ifelse(data$k_pm10>=93, 93, data$k_pm10)
data$k_pm2.5 = ifelse(data$k_pm2.5>=52, 52, data$k_pm2.5)
data$k_O3 = ifelse(data$k_O3>=0.060, 0.060, data$k_O3)
data$k_NO2 = ifelse(data$k_NO2>=0.063, 0.063, data$k_NO2)
data$k_CO = ifelse(data$k_CO>=0.8, 0.8, data$k_CO)
data$k_SO2 = ifelse(data$k_SO2>=0.006, 0.006, data$k_SO2)
data$k_SO2 = ifelse(data$k_SO2<=0.003, 0.003, data$k_SO2)
data$k_wind = ifelse(data$k_wind>=3.9, 3.9, data$k_wind)
data$ch_pm2.5 = ifelse(data$ch_pm2.5>=128.48042, 128.48042, data$ch_pm2.5)
data$ch_wind = ifelse(data$ch_wind>=19.1, 19.1, data$ch_wind)
summary(data)
#이상치 제거
boxplot(data$k_pm10)$stat
#이상치 제거
data$k_pm10 = ifelse(data$k_pm10<=28, 28, data$k_pm10)
summary(data)
#이상치 제거
boxplot(data$k_humidity)
quantile(data$k_pm10, 3/4)
getwd()
beijing_dust= read.csv("final_beijing_dust.csv")
head(beijing_dust)
names(beijing_dust) = c("date","ch_pm2.5")
head(beijing_dust,10)
beijing_climate= read.csv("beijing_climate.csv")
head(beijing_climate)
names(beijing_climate) = c("date","ch_avgtemp","ch_humidity","ch_rain","ch_sight","ch_wind")
head(beijing_climate,10)
seoul_dust= read.csv("seoul_dust.csv")
head(seoul_dust)
names(seoul_dust) = c("date","k_pm10","k_pm2.5","k_O3","k_NO2","k_CO","k_SO2")
head(seoul_dust,10)
seoul_climate= read.csv("seoul_climate.csv")
head(seoul_climate)
names(seoul_climate) = c("date","k_avgtemp","k_rain","k_wind","k_wind_direct","k_humidity")
head(seoul_climate,10)
library(dplyr)
beijing = left_join(beijing_dust,beijing_climate, by = "date")
beijing
seoul = left_join(seoul_dust,seoul_climate, by = "date")
seoul
seoul$date=gsub("-", "", seoul$date)
seoul$date = as.numeric(seoul$date)
data = left_join(seoul, beijing, by = "date")
head(data,10)
summary(data)
#결측치 제거
library(DataExplorer)
plot_missing(data)
data$ch_rain = ifelse(is.na(data$ch_rain), 0, data$ch_rain)
data$k_rain = ifelse(is.na(data$k_rain), 0, data$k_rain)
data$ch_sight <- ifelse(is.na(data$ch_sight), round(mean(data$ch_sight,na.rm = T),2), data$ch_sight)
table(data$k_wind_direct)
data$k_wind_direct <- ifelse(is.na(data$k_wind_direct), 270, data$k_wind_direct)
data$k_wind <- ifelse(is.na(data$k_wind), round(mean(data$k_wind,na.rm = T),1), data$k_wind)
data$ch_wind <- ifelse(is.na(data$ch_wind), round(mean(data$ch_wind,na.rm = T),1), data$ch_wind)
data$ch_avgtemp <- ifelse(is.na(data$ch_avgtemp), round(mean(data$ch_avgtemp,na.rm = T),1), data$ch_avgtemp)
data$ch_humidity <- ifelse(is.na(data$ch_humidity), round(mean(data$ch_humidity,na.rm = T)), data$ch_humidity)
data$ch_pm2.5 <- ifelse(is.na(data$ch_pm2.5), round(mean(data$ch_pm2.5,na.rm = T),5), data$ch_pm2.5)
plot_missing(data)
summary(data)
#이상치 제거
data$k_pm10 = ifelse(data$k_pm10>=93, 93, data$k_pm10)
data$k_pm2.5 = ifelse(data$k_pm2.5>=52, 52, data$k_pm2.5)
data$k_O3 = ifelse(data$k_O3>=0.060, 0.060, data$k_O3)
data$k_NO2 = ifelse(data$k_NO2>=0.063, 0.063, data$k_NO2)
data$k_CO = ifelse(data$k_CO>=0.8, 0.8, data$k_CO)
data$k_SO2 = ifelse(data$k_SO2>=0.006, 0.006, data$k_SO2)
data$k_SO2 = ifelse(data$k_SO2<=0.003, 0.003, data$k_SO2)
data$k_wind = ifelse(data$k_wind>=3.9, 3.9, data$k_wind)
data$ch_pm2.5 = ifelse(data$ch_pm2.5>=128.48042, 128.48042, data$ch_pm2.5)
data$ch_wind = ifelse(data$ch_wind>=19.1, 19.1, data$ch_wind)
summary(data)
str(data)
getwd()
beijing_dust= read.csv("final_beijing_dust.csv")
head(beijing_dust)
names(beijing_dust) = c("date","ch_pm2.5")
head(beijing_dust,10)
beijing_climate= read.csv("beijing_climate.csv")
head(beijing_climate)
names(beijing_climate) = c("date","ch_avgtemp","ch_humidity","ch_rain","ch_sight","ch_wind")
head(beijing_climate,10)
seoul_dust= read.csv("seoul_dust.csv")
head(seoul_dust)
names(seoul_dust) = c("date","k_pm10","k_pm2.5","k_O3","k_NO2","k_CO","k_SO2")
head(seoul_dust,10)
seoul_climate= read.csv("seoul_climate.csv")
head(seoul_climate)
names(seoul_climate) = c("date","k_avgtemp","k_rain","k_wind","k_wind_direct","k_humidity")
head(seoul_climate,10)
library(dplyr)
beijing = left_join(beijing_dust,beijing_climate, by = "date")
beijing
seoul = left_join(seoul_dust,seoul_climate, by = "date")
seoul
seoul$date=gsub("-", "", seoul$date)
seoul$date = as.numeric(seoul$date)
data = left_join(seoul, beijing, by = "date")
head(data,10)
summary(data)
#결측치 제거
library(DataExplorer)
plot_missing(data)
data$ch_rain = ifelse(is.na(data$ch_rain), 0, data$ch_rain)
data$k_rain = ifelse(is.na(data$k_rain), 0, data$k_rain)
data$ch_sight <- ifelse(is.na(data$ch_sight), round(mean(data$ch_sight,na.rm = T),2), data$ch_sight)
table(data$k_wind_direct)
data$k_wind_direct <- ifelse(is.na(data$k_wind_direct), 270, data$k_wind_direct)
data$k_wind <- ifelse(is.na(data$k_wind), round(mean(data$k_wind,na.rm = T),1), data$k_wind)
data$ch_wind <- ifelse(is.na(data$ch_wind), round(mean(data$ch_wind,na.rm = T),1), data$ch_wind)
data$ch_avgtemp <- ifelse(is.na(data$ch_avgtemp), round(mean(data$ch_avgtemp,na.rm = T),1), data$ch_avgtemp)
data$ch_humidity <- ifelse(is.na(data$ch_humidity), round(mean(data$ch_humidity,na.rm = T)), data$ch_humidity)
data$ch_pm2.5 <- ifelse(is.na(data$ch_pm2.5), round(mean(data$ch_pm2.5,na.rm = T),5), data$ch_pm2.5)
plot_missing(data)
summary(data)
#이상치 제거
boxplot(data$k_pm10)
#이상치 제거
boxplot(data$k_pm10)$stat
quantile(data$k_pm10, 2/4)
quantile(data$k_pm10, 3/4)
quantile(data$k_pm10, 4/4)
quantile(data$k_pm10, 1/4)
library(MASS)
install.packages("caretEnsemble")
library(CaTools)
library("caTools")
install.packages("caTools")
install.packages("caTools")
library(caTools)
pima = rbind(Pima.tr, Pima.te)
set.seed(2019)
split = createDataPartition(y=pima$type, p = 0.7, list=F)
library(caretEnsemble)
split = createDataPartition(y=pima$type, p = 0.7, list=F)
library(caret)
split = createDataPartition(y=pima$type, p = 0.7, list=F)
train = pima[split,]
test = pima[-split,]
table(train$type)
control = trainControl(method="cv", number=5, savePredictions = "final",
classProbs = T, index=createResample(train$type,5),
sampling = "up", summaryFunction = towClassSummary)
control = trainControl(method="cv", number=5, savePredictions = "final",
classProbs = T, index=createResample(train$type,5),
sampling = "up", summaryFunction = twoClassSummary)
set.seed(2019)
models = createList(type ~., data = train, trControl = control, metric="ROC",
methodList = c("rpart","earth","knn"))
models = caretList(type ~., data = train, trControl = control, metric="ROC",
methodList = c("rpart","earth","knn"))
models
modelCor(resamples(models))
models_preds = lapply(models, predict, newdata=test, type="prob")
modles_preds = lapply(models_preds, function(x) x[,"Yes"])
models_preds = lapply(models, predict, newdata=test, type="prob")
models_preds = lapply(models_preds, function(x) x[,"Yes"])
models_preds = data.frame(models_preds)
stack = caretStack(models, method="glm",metric="ROC",
trControl = trainControl(method = "boot",number=5,
savePredictions = "final",classProbs = T,summaryFunction = twoClassSummary))
summary(stack)
prob = 1 - predict(stack, newdata = test, type="prob")
model_preds$ensemble = prob
models_preds$ensemble = prob
colAUC(models_preds, test$type)
library(mlr)
install.packages("mlr")
library(ggplot2)
library(HDclassif)
install.packages("DMwR")
library(DMwR)
library(reshape2)
library(corrplot)
data(wine)
table(wine$class)
wine$class = as.factor(wine$class)
set.seed(2019)
df = SMOTE(class ~., wine, perc.over = 300, prec.under = 300)
table(df$class)
wine.scale = data.frame(scale(wine[,2:5]))
wine.scale$class = wine$class
wine.melt = melt(wine.scale, id.vars = "class")
ggplot(wine.melt, aes(x=class, y=value)) + geom_boxplot() + facet_wrap( ~ variable, ncol=2)
#특이점 찾음
outHigh = function(x){
x[x > quantile(x, 0.99)] = quantile(x,-.75)
x
}
outLow = function(x){
x[x < quantile(x,0.01)] = quantile(x,0.25)
x
}
wine.trunc = data.frame(lapply(wine[,-1]),outHigh)
wine.trunc = data.frame(lapply(wine[,-1]),outHigh)
wine.trunc = data.frame(lapply(wine[,-1]),outHigh())
wine.trunc = data.frame(outHigh(lapply(wine[,-1])))
wine.trunc
wine.trunc = data.frame(lapply(wine[,-1],outHigh))
#특이점 찾음
outHigh = function(x){
x[x > quantile(x, 0.99)] = quantile(x,0.75)
x
}
outLow = function(x){
x[x < quantile(x,0.01)] = quantile(x,0.25)
x
}
wine.trunc = data.frame(lapply(wine[,-1],outHigh))
wine.trunc
wine.trunc = data.frame(lapply(wine.trunc, outLow))
wine.trunc$class = wine$class
ggplot(wine.trunc, aes(x=class, y=value)) + geom_boxplot() + facet_wrap( ~ variable, ncol=2)
wine.melt
wine.trunc
boxplot(wine.trunc$v3 ~ wine.trunc$class)
boxplot(wine.trunc$V3)
boxplot(wine.trunc$V3 ~ wine.trunc$class)
#상관 관계
c = cor(wine.trunc[,-14])
corrplot(c, uppper="ellipse")
corrplot(c, upper="ellipse")
corrplot.mixed(c, upper="ellipse")
library(caret)
set.seed(2019)
split = createDataPartition(y= df$class, p=0.7, list=F)
train = df[split,]
test = df[-split,]
wine.task = makeClassifTask(id="wine", data=train, target="class")
library(mlr)
wine.task = makeClassifTask(id="wine", data=train, target="class")
str(getTaskData(wine.task))
rdesc = makeResampleDesc("Subsample",iters=3)
param = makeParamSet(makeDiscreteParam("ntree",values=c(750,1000,1250,1500,1750,2000)))
ctrl = makeTuneControlGrid()
tuning = tuneParams("classif.randomForest",task=wine.task, resampling = rdesc, par.set = param,
control = ctrl)
tuning$x
tuning$y
rf= setHyperPars(makeLearner("classif.randomForest",predict.type="prob"), par.vals = tuning$x)
fitRF = train(rf, wine.task)
fitRF$learner.model
predRF = predict(fitRF, newdata = test)
getConfMatrix(predRF)
calculateConfusionMatrix(predRF)
performance(predRF, measures = list(mmce,acc))
ovr = makeMulticlassWrapper("classif.penalized.ridge",mcw.method = "onevsrest")
ovr = makeMulticlassWrapper("classif.penalized",mcw.method = "onevsrest")
ovr = makeMulticlassWrapper("classif.penalized.ridge",mcw.method = "onevsrest")
ovr = makeMulticlassWrapper("classif.penalized",mcw.method = "onevsrest")
ovr <- makeMulticlassWrapper("classif.penalized.ridge",       mcw.method = "onevsrest")
install.packages("penalized")
library(penalized)
ovr = makeMulticlassWrapper("classif.penalized.ridge",mcw.method = "onevsrest")
ovr <- makeMulticlassWrapper("classif.penalized.ridge",       mcw.method = "onevsrest")
ovr <- makeMulticlassWrapper("classif.penalized",       mcw.method = "onevsrest")
bag.ovr = makeBaggingWrapper(ovr, bw.iters = 10, bw.replace = T)
bag.ovr = makeBaggingWrapper(ovr, bw.iters = 10, bw.replace = T,
bw.size = 0.7, bw.feats = 1)
set.seed(2019)
fitOVR = mlr::train(bag.ovr, wine.task)
predOVR = predict(fitOVR, newdata=test)
head(data.frame(predOVR))
calculateConfusionMatrix(predOVR)
pima.task = makeClassifTask(id="pima", data=train, target="type")
pima
pima.task = makeClassifTask(id="pima", data=train, target="type")
names(pima)
pima.task = makeClassifTask(id="pima", data=train, target="type")
pima.task = makeClassifTask(id="pima", data=train)
pima.task = makeClassifTask(id="pima", data=train, target="glu")
names(pima) = names("npreg","glu","bp","skin","bmi","ped","age","type" )
names(pima) = c("npreg","glu","bp","skin","bmi","ped","age","type" )
pima.task = makeClassifTask(id="pima", data=train, target="glu")
pima.task = makeClassifTask(id="pima", data=train, target="type")
train
library(mlr)
library(ggplot2)
library(HDclassif)
library(DMwR)
library(reshape2)
library(corrplot)
data(wine)
table(wine$class)
wine$class = as.factor(wine$class)
set.seed(2019)
df = SMOTE(class ~., wine, perc.over = 300, prec.under = 300)
table(df$class)
wine.scale = data.frame(scale(wine[,2:5]))
wine.scale$class = wine$class
wine.melt = melt(wine.scale, id.vars = "class")
ggplot(wine.melt, aes(x=class, y=value)) + geom_boxplot() + facet_wrap( ~ variable, ncol=2)
#특이점 찾음 -> 제거
outHigh = function(x){
x[x > quantile(x, 0.99)] = quantile(x,0.75)
x
}
outLow = function(x){
x[x < quantile(x,0.01)] = quantile(x,0.25)
x
}
wine.trunc = data.frame(lapply(wine[,-1],outHigh))
wine.trunc = data.frame(lapply(wine.trunc, outLow))
wine.trunc$class = wine$class
boxplot(wine.trunc$V3 ~ wine.trunc$class)
#상관 관계
c = cor(wine.trunc[,-14])
corrplot.mixed(c, upper="ellipse")
library(mlr)
library(caret)
set.seed(2019)
split = createDataPartition(y= df$class, p=0.7, list=F)
train = df[split,]
test = df[-split,]
train
library(penalized)
ovr <- makeMulticlassWrapper("classif.penalized",       mcw.method = "onevsrest")
bag.ovr = makeBaggingWrapper(ovr, bw.iters = 10, bw.replace = T,
bw.size = 0.7, bw.feats = 1)
set.seed(2019)
fitOVR = mlr::train(bag.ovr, wine.task)
predOVR = predict(fitOVR, newdata=test)
head(data.frame(predOVR))
calculateConfusionMatrix(predOVR)
pima.task = makeClassifTask(id="pima", data=train, target="type")
pima
pima.task = makeClassifTask(id="pima", data=train, target="type")
library(ggfortify)
set.seed(2019)
ar1 = arima.sim(list(order = c(1,0,0), ar = 0.5), n=200)
autoplot(ar1, main="AR1")
#자기상관함수
autoplot(acf(ar1,plot=F),main="AR1-ACF")
#편자기상관관계
autoplot(pacf(ar1, plot=F),main="AR1 - PACF")
#이동 평균
set.seed(2019)
ma1 = arima.sim(list(order = c(0,0,1), ma = -0.5),n=200)
autoplot(ma1, main="MA1")
autoplot(acf(ma1,plot=F),main="MA1-ACF")
autoplot(pacf(ma1, plot=F),main="MA1 - PACF")
climate = read.csv("climate.csv", stringsAsFactors = F)
str(climate)
climate = ts(climate[,2:3], start=1919, end = 2013)
head(climate)
library(forecast)
library(tseries)
plot(climate)
cor(climate)
autoplot(acf(climate[,2], plot=F),main="Temp ACF")
autoplot(pacf(climate[,2], plot=F),main="Temp PACF")
autoplot(acf(climate[,1], plot=F),main="CO2 ACF")
autoplot(pacf(climate[,1], plot=F),main="CO2 PACF")
#교차상관 함수
ccf(climate[,1], climate[,2], main="CCF")
#adf.test()로 두 시계열의 정상성을 확인
adf.test(climate[,1])
adf.test(climate[,2])
temp = climate[,2]
train = window(temp, start = 1946, 2003)
test = window(temp, start=2004)
#평활모형
fit.holt = holt(train, h=10, initial = "optimal")
plot(forecast(fit.holt))
lines(test,type="o")
fit.holtd = holt(train, h=10, initial = "optimal", damped = T)
plot(forecast(fit.holtd), main="Holt Damped")
lines(test,type="o")
#ARIMA 모델
fit.arima = auto.arima(train)
summary(fit.arima)
plot(forecast(fit.arima, h=10))
lines(test, type="o")
mapeHOLT = sum(abs((test-fit.holt$mean)/test))/10
mapeHOLT
mapeHOLTD = sum(abs((test - fit.holtd$mean)/test))/10
mapeHOLTD
mapeARIMA = sum(abs((test- forecast(fit.arima, h=10)$mean)/test))/10
mapeARIMA
#인과 관계 검사
#선형 회귀
fit.lm = lm(Temp ~ CO2, data= climate)
summary(fit.lm)
plot.ts(fit.lm$residuals)
acf(fit.lm$residuals)
library(lmtest)
dwtest(fit.lm)
#벡터 자기 회귀 모형
ndiffs(climate[,1],test="adf")
ndiffs(climate[,2],test="adf")
library(vars)
library(aod)
climateDiff = diff(climate)
climateDiff = window(climateDiff, start=1946)
head(climateDiff)
lag.select = VARselect(climateDiff, lag.max = 12)
lag.select
fit1 = VAR(climateDiff, p=5)
library(ggfortify)
set.seed(2019)
ar1 = arima.sim(list(order = c(1,0,0), ar = 0.5), n=200)
autoplot(ar1, main="AR1")
#자기상관함수
autoplot(acf(ar1,plot=F),main="AR1-ACF")
#편자기상관관계
autoplot(pacf(ar1, plot=F),main="AR1 - PACF")
#이동 평균
set.seed(2019)
ma1 = arima.sim(list(order = c(0,0,1), ma = -0.5),n=200)
autoplot(ma1, main="MA1")
autoplot(acf(ma1,plot=F),main="MA1-ACF")
autoplot(pacf(ma1, plot=F),main="MA1 - PACF")
setwd("D:/R")
climate = read.csv("climate.csv", stringsAsFactors = F)
str(climate)
climate = ts(climate[,2:3], start=1919, end = 2013)
head(climate)
library(forecast)
library(tseries)
plot(climate)
cor(climate)
autoplot(acf(climate[,2], plot=F),main="Temp ACF")
autoplot(pacf(climate[,2], plot=F),main="Temp PACF")
autoplot(acf(climate[,1], plot=F),main="CO2 ACF")
autoplot(pacf(climate[,1], plot=F),main="CO2 PACF")
#교차상관 함수
ccf(climate[,1], climate[,2], main="CCF")
#adf.test()로 두 시계열의 정상성을 확인
adf.test(climate[,1])
adf.test(climate[,2])
temp = climate[,2]
train = window(temp, start = 1946, 2003)
test = window(temp, start=2004)
#평활모형
fit.holt = holt(train, h=10, initial = "optimal")
plot(forecast(fit.holt))
lines(test,type="o")
fit.holtd = holt(train, h=10, initial = "optimal", damped = T)
plot(forecast(fit.holtd), main="Holt Damped")
lines(test,type="o")
#ARIMA 모델
fit.arima = auto.arima(train)
summary(fit.arima)
plot(forecast(fit.arima, h=10))
lines(test, type="o")
mapeHOLT = sum(abs((test-fit.holt$mean)/test))/10
mapeHOLT
mapeHOLTD = sum(abs((test - fit.holtd$mean)/test))/10
mapeHOLTD
mapeARIMA = sum(abs((test- forecast(fit.arima, h=10)$mean)/test))/10
mapeARIMA
#인과 관계 검사
#선형 회귀
fit.lm = lm(Temp ~ CO2, data= climate)
summary(fit.lm)
plot.ts(fit.lm$residuals)
acf(fit.lm$residuals)
library(lmtest)
dwtest(fit.lm)
#벡터 자기 회귀 모형
ndiffs(climate[,1],test="adf")
ndiffs(climate[,2],test="adf")
library(vars)
library(aod)
climateDiff = diff(climate)
climateDiff = window(climateDiff, start=1946)
head(climateDiff)
lag.select = VARselect(climateDiff, lag.max = 12)
lag.select
fit1 = VAR(climateDiff, p=5)
summary(fit1)
serial.test(fit1, type="PT.asymptotic")
x2y = causality(fit1, cause="CO2")
y2x = causality(fit1, cause = "Temp")
x2y$Granger
y2x$Granger
climateLevels = window(climate, start=1946)
level.select = VARselect(climateLevels, lag.max = 12)
level.select$selection
fit2 = VAR(climateLevels, p=7)
serial.test(fit2, type="PT.asymtotic")
serial.test(fit2, type="PT.asymptotic")
CO2terms = seq(1,11,2)
Tempterms = seq(2,12,2)
#wald검정
wald.test(b=coef(fit2$varresult$Temp), Sigma = vcov(fit2$varresult$Temp), Terms=c(CO2terms))
autoplot(predict(fit2, n.ahead=25, ci=0.95))
